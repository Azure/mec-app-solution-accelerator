@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@{
}


<div class="overflow-auto align-self-center" id="table">
    <table id="table">
        <tr>
            <th class="border border-dark font-bold">
                <div class="table-header fs-6 d-flex flex-row font-bold justify-content-center">Capture Time</div>
            </th>
            <th class="border border-dark font-bold">
                <div class="table-header fs-6 d-flex flex-row font-bold justify-content-center">Alert Time</div>
            </th>
            <th class="border border-dark font-bold">
                <div class="table-header fs-6 d-flex flex-row font-bold justify-content-center">Exec Time</div>
            </th>
            <th class="border border-t-dark border-dark">
                <div class="table-header d-flex flex-row justify-content-center">
                    <div class="fs-6 font-bold">Source</div>
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="filter-icon" onclick="toggleSourceFilter()">
                        <path fill-rule="evenodd" d="M3.792 2.938A49.069 49.069 0 0112 2.25c2.797 0 5.54.236 8.209.688a1.857 1.857 0 011.541 1.836v1.044a3 3 0 01-.879 2.121l-6.182 6.182a1.5 1.5 0 00-.439 1.061v2.927a3 3 0 01-1.658 2.684l-1.757.878A.75.75 0 019.75 21v-5.818a1.5 1.5 0 00-.44-1.06L3.13 7.938a3 3 0 01-.879-2.121V4.774c0-.897.64-1.683 1.542-1.836z" clip-rule="evenodd" />
                    </svg>
                </div>
            </th>
            <th class="border border-t-dark border-dark">
                <div class="table-header d-flex flex-row justify-content-center">
                    <div class="fs-6 font-bold">Type</div>
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="filter-icon" onclick="toggleAlertFilter()">
                        <path fill-rule="evenodd" d="M3.792 2.938A49.069 49.069 0 0112 2.25c2.797 0 5.54.236 8.209.688a1.857 1.857 0 011.541 1.836v1.044a3 3 0 01-.879 2.121l-6.182 6.182a1.5 1.5 0 00-.439 1.061v2.927a3 3 0 01-1.658 2.684l-1.757.878A.75.75 0 019.75 21v-5.818a1.5 1.5 0 00-.44-1.06L3.13 7.938a3 3 0 01-.879-2.121V4.774c0-.897.64-1.683 1.542-1.836z" clip-rule="evenodd" />
                    </svg>
                </div>
            </th>
            <th class="border border-t-dark border-dark text-xl font-semibold">
                <div class="table-header fs-6 d-flex flex-row font-bold justify-content-center">Information</div>
            </th>
        </tr>
        @foreach (var alert in (IEnumerable<Models.Alert>)ViewData["Alerts"]!)
        {
            <tr class="click-change-color" onclick="selectAlert('@Model.FindInputs(alert)', '@alert.Id', '@alert.Type', @alert.Source.Lat, @alert.Source.Lon, '@alert.CaptureTime', '@alert.AlertTime', @alert.Accuracy, '@alert.Information', '@alert.Frame', '@alert.MsExecutionTime')" id="@alert.Id">
                <td class="cursor-pointer border border-dark text-center py-1">@alert.CaptureTime.ToString("d")<br>@alert.CaptureTime.ToString("T")</td>
                <td class="cursor-pointer border border-dark text-center py-1">@alert.AlertTime.ToString("d")<br>@alert.AlertTime.ToString("T")</td>
                <td class="cursor-pointer border border-dark text-center py-1">@Math.Round(alert.MsExecutionTime)</td>
                <td class="cursor-pointer border border-dark text-center py-1">@alert.Source.Name</td>
                <td class="cursor-pointer border border-dark text-center py-1">
                    <div class="d-flex flex-row justify-content-center px-2">
                        @if (alert.Accuracy > 90)
                        {
                            <div class="priority-container d-flex flex-row border rounded" id="danger">
                                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="priority-svg" id="danger-svg">
                                    <path fill-rule="evenodd" d="M9.401 3.003c1.155-2 4.043-2 5.197 0l7.355 12.748c1.154 2-.29 4.5-2.599 4.5H4.645c-2.309 0-3.752-2.5-2.598-4.5L9.4 3.003zM12 8.25a.75.75 0 01.75.75v3.75a.75.75 0 01-1.5 0V9a.75.75 0 01.75-.75zm0 8.25a.75.75 0 100-1.5.75.75 0 000 1.5z" clip-rule="evenodd" />
                                </svg>
                                <div class="text-darkRed text-center text-sm" id="danger-text">alert-danger</div>
                            </div>
                        }
                        else if (alert.Accuracy > 70)
                        {
                            <div class="priority-container d-flex flex-row border rounded" id="warning">
                                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="priority-svg" id="warning-svg">
                                    <path fill-rule="evenodd" d="M2.25 12c0-5.385 4.365-9.75 9.75-9.75s9.75 4.365 9.75 9.75-4.365 9.75-9.75 9.75S2.25 17.385 2.25 12zM12 8.25a.75.75 0 01.75.75v3.75a.75.75 0 01-1.5 0V9a.75.75 0 01.75-.75zm0 8.25a.75.75 0 100-1.5.75.75 0 000 1.5z" clip-rule="evenodd" />
                                </svg>
                                <div class="text-darkYellow text-center text-sm" id="warning-text">alert-warning</div>
                            </div>
                        }
                        else
                        {
                            <div class="priority-container d-flex flex-row border rounded" id="info">
                                <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="priority-svg" id="info-svg">
                                    <path fill-rule="evenodd" d="M2.25 12c0-5.385 4.365-9.75 9.75-9.75s9.75 4.365 9.75 9.75-4.365 9.75-9.75 9.75S2.25 17.385 2.25 12zm8.706-1.442c1.146-.573 2.437.463 2.126 1.706l-.709 2.836.042-.02a.75.75 0 01.67 1.34l-.04.022c-1.147.573-2.438-.463-2.127-1.706l.71-2.836-.042.02a.75.75 0 11-.671-1.34l.041-.022zM12 9a.75.75 0 100-1.5.75.75 0 000 1.5z" clip-rule="evenodd" />
                                </svg>
                                <div class="text-buttonGray text-center text-sm" id="info-text">alert-info</div>
                            </div>
                        }
                    </div>
                </td>
                <td class="cursor-pointer border border-dark text-center py-1" :class="filteredAlerts[i-1].id == SelectedAlert.id ? 'bg-routeSelected' : 'bg-tableData'">
                    <div class="d-flex flex-row justify-content-center px-2">
                        @if (Model.FindInputs(alert) == "both")
                        {
                            <div class="mx-1 d-flex flex-row">
                                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width=".7" stroke="currentColor" class="information">
                                    <path stroke-linecap="round" stroke-linejoin="round" d="M19.5 14.25v-2.625a3.375 3.375 0 00-3.375-3.375h-1.5A1.125 1.125 0 0113.5 7.125v-1.5a3.375 3.375 0 00-3.375-3.375H8.25m0 12.75h7.5m-7.5 3H12M10.5 2.25H5.625c-.621 0-1.125.504-1.125 1.125v17.25c0 .621.504 1.125 1.125 1.125h12.75c.621 0 1.125-.504 1.125-1.125V11.25a9 9 0 00-9-9z" />
                                </svg>
                                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width=".7" stroke="currentColor" class="information">
                                    <path stroke-linecap="round" stroke-linejoin="round" d="M2.25 15.75l5.159-5.159a2.25 2.25 0 013.182 0l5.159 5.159m-1.5-1.5l1.409-1.409a2.25 2.25 0 013.182 0l2.909 2.909m-18 3.75h16.5a1.5 1.5 0 001.5-1.5V6a1.5 1.5 0 00-1.5-1.5H3.75A1.5 1.5 0 002.25 6v12a1.5 1.5 0 001.5 1.5zm10.5-11.25h.008v.008h-.008V8.25zm.375 0a.375.375 0 11-.75 0 .375.375 0 01.75 0z" />
                                </svg>
                            </div>
                        }
                        else if (Model.FindInputs(alert) == "text")
                        {
                            <div class="mx-1">
                                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width=".7" stroke="currentColor" class="information">
                                    <path stroke-linecap="round" stroke-linejoin="round" d="M19.5 14.25v-2.625a3.375 3.375 0 00-3.375-3.375h-1.5A1.125 1.125 0 0113.5 7.125v-1.5a3.375 3.375 0 00-3.375-3.375H8.25m0 12.75h7.5m-7.5 3H12M10.5 2.25H5.625c-.621 0-1.125.504-1.125 1.125v17.25c0 .621.504 1.125 1.125 1.125h12.75c.621 0 1.125-.504 1.125-1.125V11.25a9 9 0 00-9-9z" />
                                </svg>
                            </div>
                        }
                        else if (Model.FindInputs(alert) == "image")
                        {
                            <div class="mx-1">
                                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width=".7" stroke="currentColor" class="information">
                                    <path stroke-linecap="round" stroke-linejoin="round" d="M2.25 15.75l5.159-5.159a2.25 2.25 0 013.182 0l5.159 5.159m-1.5-1.5l1.409-1.409a2.25 2.25 0 013.182 0l2.909 2.909m-18 3.75h16.5a1.5 1.5 0 001.5-1.5V6a1.5 1.5 0 00-1.5-1.5H3.75A1.5 1.5 0 002.25 6v12a1.5 1.5 0 001.5 1.5zm10.5-11.25h.008v.008h-.008V8.25zm.375 0a.375.375 0 11-.75 0 .375.375 0 01.75 0z" />
                                </svg>
                            </div>
                        }
                    </div>
                </td>
            </tr>
        }
    </table>
</div>
<div class="d-flex flex-row justify-content-end align-items-center">
    <button class="button-table px-2 my-2 py-1 font-sans fw-light fs-6 rounded align-self-right" id="refresh-data" onclick="refreshData()">Refresh Data</button>
    <label class="m-2 font-sans fw-light fs-6">Automatic Refresh:</label>
    <label class="switch my-2">
        <input type="checkbox" onclick="toggleAutomaticRefresh()" id="switch">
        <span class="slider round"></span>
    </label>
</div>


<div class="d-flex flex-column position-absolute p-1 rounded hide" id="alert-filter">
    <h1 class="text-mWhite">Check the warning types to show:</h1>
    <div class="d-flex flex-row">
        <input type="checkbox" checked="checked">
        <label class="px-1 text-mWhite">Danger alerts</label>
    </div>
    <div class="d-flex flex-row">
        <input type="checkbox" checked="checked">
        <label class="px-1 text-mWhite">Warning alerts</label>
    </div>
    <div class="d-flex flex-row">
        <input type="checkbox" checked="checked">
        <label class="px-1 text-mWhite">Information alerts</label>
    </div>
    <div class="d-flex flex-row justify-content-end">
        <button class="text-mWhite filter-button rounded border" onclick="toggleAlertFilter()">Close</button>
        <button class="text-mWhite filter-button rounded border" onclick="applyFilters('alert')">Apply</button>
    </div>
</div>

<div class="d-flex flex-column position-absolute p-1 rounded hide" id="source-filter">
    <h1 class="text-mWhite">Check the sources to show:</h1>
    @foreach (var source in (List<Models.Source>)Model.getSources())
    {
        <div class="d-flex flex-row">
            <input type="checkbox" checked="checked">
            <label class="px-1 text-mWhite">@source.Name</label>
        </div>
    }
    <div class="d-flex flex-row justify-content-end">
        <button class="text-mWhite filter-button rounded border" onclick="toggleSourceFilter()">Close</button>
        <button class="text-mWhite filter-button rounded border" onclick="applyFilters('source')">Apply</button>
    </div>
</div>