@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@{
}

<div class="d-flex flex-row" id="data">
    <div id="left" class="d-flex flex-column w-full h-full overflow-auto">
        <div class="overflow-auto align-self-center" id="table">
            @*@onscroll="checkScroll">*@
            <table id="table">
                <tr>
                    <th class="border border-dark font-bold tracking-wide w-1/6">
                        <div class="table-header fs-3 d-flex flex-row font-bold justify-content-center">Date</div>
                    </th>
                    <th class="border border-t-dark border-dark tracking-wide w-5/12">
                        <div class="table-header d-flex flex-row justify-content-center">
                            <div class="fs-3 font-bold tracking-wide">Source</div>
                            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="filter-icon active:fill-mWhite hover:fill-buttonDisabled">
                                <path fill-rule="evenodd" d="M3.792 2.938A49.069 49.069 0 0112 2.25c2.797 0 5.54.236 8.209.688a1.857 1.857 0 011.541 1.836v1.044a3 3 0 01-.879 2.121l-6.182 6.182a1.5 1.5 0 00-.439 1.061v2.927a3 3 0 01-1.658 2.684l-1.757.878A.75.75 0 019.75 21v-5.818a1.5 1.5 0 00-.44-1.06L3.13 7.938a3 3 0 01-.879-2.121V4.774c0-.897.64-1.683 1.542-1.836z" clip-rule="evenodd" />
                            </svg>
                        </div>
                    </th>
                    <th class="border border-t-dark border-dark tracking-wide w-3/12">
                        <div class="table-header d-flex flex-row justify-content-center">
                            <div class="fs-3 font-bold tracking-wide">Type</div>
                            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="filter-icon active:fill-mWhite hover:fill-buttonDisabled">
                                @*@click.prevent="showFilter">*@
                                <path fill-rule="evenodd" d="M3.792 2.938A49.069 49.069 0 0112 2.25c2.797 0 5.54.236 8.209.688a1.857 1.857 0 011.541 1.836v1.044a3 3 0 01-.879 2.121l-6.182 6.182a1.5 1.5 0 00-.439 1.061v2.927a3 3 0 01-1.658 2.684l-1.757.878A.75.75 0 019.75 21v-5.818a1.5 1.5 0 00-.44-1.06L3.13 7.938a3 3 0 01-.879-2.121V4.774c0-.897.64-1.683 1.542-1.836z" clip-rule="evenodd" />
                            </svg>
                        </div>
                    </th>
                    <th class="border border-t-dark border-dark text-xl font-semibold tracking-wide w-1/6">
                        <div class="table-header fs-3 d-flex flex-row font-bold justify-content-center">Information</div>
                    </th>
                </tr>
                @*@for (int i = 0; i < Model.GetMax(); i++)*@
                @foreach (var alert in (IEnumerable<Models.Alert>)ViewData["Alerts"]!)
                 {
                    if(Model.GetMax(alert))
                    {
                        <tr onclick="console.log('@Model.SelectAlert(alert)')">
                            @*class="@{alert.Id == Model.selectedAlert.Id ? 'bg-mWhite' : 'bg-alertSelected';}">*@
                            <td class="cursor-pointer border border-dark text-center py-1" :class="filteredAlerts[i-1].id == selectedAlert.id ? 'bg-routeSelected' : 'bg-tableData'">@alert.AlertTriggerTimeIni.ToString("d")<br>@alert.AlertTriggerTimeIni.ToString("T")</td>
                            <td class="cursor-pointer border border-dark text-center py-1" :class="filteredAlerts[i-1].id == selectedAlert.id ? 'bg-routeSelected' : 'bg-tableData'">@Model.getSourceName(alert.Source.Id)</td>
                            <td class="cursor-pointer border border-dark text-center py-1" :class="filteredAlerts[i-1].id == selectedAlert.id ? 'bg-routeSelected' : 'bg-tableData'">
                                <div class="d-flex flex-row justify-content-center px-2">
                                    @if (alert.Accuracy > 90)
                                    {
                                        <div class="priority-container d-flex flex-row border rounded" id="danger" onclick="console.log('@Model.selectedAlert.toString()')">
                                            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="priority-svg" id="danger-svg">
                                                <path fill-rule="evenodd" d="M9.401 3.003c1.155-2 4.043-2 5.197 0l7.355 12.748c1.154 2-.29 4.5-2.599 4.5H4.645c-2.309 0-3.752-2.5-2.598-4.5L9.4 3.003zM12 8.25a.75.75 0 01.75.75v3.75a.75.75 0 01-1.5 0V9a.75.75 0 01.75-.75zm0 8.25a.75.75 0 100-1.5.75.75 0 000 1.5z" clip-rule="evenodd" />
                                            </svg>
                                            <div class="text-darkRed text-center text-sm" id="danger-text">alert-danger</div>
                                        </div>
                                    }
                                    else if (alert.Accuracy > 70)
                                    {
                                        <div class="priority-container d-flex flex-row border rounded" id="warning">
                                            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="priority-svg" id="warning-svg">
                                                <path fill-rule="evenodd" d="M2.25 12c0-5.385 4.365-9.75 9.75-9.75s9.75 4.365 9.75 9.75-4.365 9.75-9.75 9.75S2.25 17.385 2.25 12zM12 8.25a.75.75 0 01.75.75v3.75a.75.75 0 01-1.5 0V9a.75.75 0 01.75-.75zm0 8.25a.75.75 0 100-1.5.75.75 0 000 1.5z" clip-rule="evenodd" />
                                            </svg>
                                            <div class="text-darkYellow text-center text-sm" id="warning-text">alert-warning</div>
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="priority-container d-flex flex-row border rounded" id="info">
                                            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" class="priority-svg" id="info-svg">
                                                <path fill-rule="evenodd" d="M2.25 12c0-5.385 4.365-9.75 9.75-9.75s9.75 4.365 9.75 9.75-4.365 9.75-9.75 9.75S2.25 17.385 2.25 12zm8.706-1.442c1.146-.573 2.437.463 2.126 1.706l-.709 2.836.042-.02a.75.75 0 01.67 1.34l-.04.022c-1.147.573-2.438-.463-2.127-1.706l.71-2.836-.042.02a.75.75 0 11-.671-1.34l.041-.022zM12 9a.75.75 0 100-1.5.75.75 0 000 1.5z" clip-rule="evenodd" />
                                            </svg>
                                            <div class="text-buttonGray text-center text-sm" id="info-text">alert-info</div>
                                        </div>
                                    }
                                </div>
                            </td>
                            <td class="cursor-pointer border border-dark text-center py-1" :class="filteredAlerts[i-1].id == selectedAlert.id ? 'bg-routeSelected' : 'bg-tableData'">
                                <div class="d-flex flex-row justify-content-center px-2">
                                    @if (Model.FindInputs(alert) == "both")
                                    {
                                        <div class="mx-1 flex flex-row">
                                            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width=".7" stroke="currentColor" class="information">
                                                @*@click="emit('select', { input: 'text', content: props.alert.information.text })">*@
                                                <path stroke-linecap="round" stroke-linejoin="round" d="M19.5 14.25v-2.625a3.375 3.375 0 00-3.375-3.375h-1.5A1.125 1.125 0 0113.5 7.125v-1.5a3.375 3.375 0 00-3.375-3.375H8.25m0 12.75h7.5m-7.5 3H12M10.5 2.25H5.625c-.621 0-1.125.504-1.125 1.125v17.25c0 .621.504 1.125 1.125 1.125h12.75c.621 0 1.125-.504 1.125-1.125V11.25a9 9 0 00-9-9z" />
                                            </svg>
                                            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width=".7" stroke="currentColor" class="information">
                                                @*@click="emit('select', { input: 'image', content: props.alert.information.picture })">*@
                                                <path stroke-linecap="round" stroke-linejoin="round" d="M2.25 15.75l5.159-5.159a2.25 2.25 0 013.182 0l5.159 5.159m-1.5-1.5l1.409-1.409a2.25 2.25 0 013.182 0l2.909 2.909m-18 3.75h16.5a1.5 1.5 0 001.5-1.5V6a1.5 1.5 0 00-1.5-1.5H3.75A1.5 1.5 0 002.25 6v12a1.5 1.5 0 001.5 1.5zm10.5-11.25h.008v.008h-.008V8.25zm.375 0a.375.375 0 11-.75 0 .375.375 0 01.75 0z" />
                                            </svg>
                                        </div>
                                        }
                                     else if (Model.FindInputs(alert) == "text")
                                    {
                                        <div class="mx-1">
                                            @*@click="emit('select', { input: 'text', content: props.alert.information.text })">*@
                                            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width=".7" stroke="currentColor" class="information">
                                                <path stroke-linecap="round" stroke-linejoin="round" d="M19.5 14.25v-2.625a3.375 3.375 0 00-3.375-3.375h-1.5A1.125 1.125 0 0113.5 7.125v-1.5a3.375 3.375 0 00-3.375-3.375H8.25m0 12.75h7.5m-7.5 3H12M10.5 2.25H5.625c-.621 0-1.125.504-1.125 1.125v17.25c0 .621.504 1.125 1.125 1.125h12.75c.621 0 1.125-.504 1.125-1.125V11.25a9 9 0 00-9-9z" />
                                            </svg>
                                        </div>
                                    }
                                     else if (Model.FindInputs(alert) == "image")
                                    {
                                        <div class="mx-1">
                                            @*@click="emit('select', { input: 'image', content: props.alert.information.picture })">*@
                                            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width=".7" stroke="currentColor" class="information">
                                                <path stroke-linecap="round" stroke-linejoin="round" d="M2.25 15.75l5.159-5.159a2.25 2.25 0 013.182 0l5.159 5.159m-1.5-1.5l1.409-1.409a2.25 2.25 0 013.182 0l2.909 2.909m-18 3.75h16.5a1.5 1.5 0 001.5-1.5V6a1.5 1.5 0 00-1.5-1.5H3.75A1.5 1.5 0 002.25 6v12a1.5 1.5 0 001.5 1.5zm10.5-11.25h.008v.008h-.008V8.25zm.375 0a.375.375 0 11-.75 0 .375.375 0 01.75 0z" />
                                            </svg>
                                        </div>
                                    }
                                </div>
                            </td>
                        </tr>
                    }
                }
            </table>
            <script>
                    console.log('@ViewData["Alerts"]');
                    @*console.log(@ViewData["Alerts"].Count)*@
            </script>
        </div>
        <div class="d-flex flex-row justify-content-end">
            <button class="button-table me-2 px-2 my-2 py-1 font-sans fw-light fs-6 rounded align-self-right active:bg-mWhite" :class="bottomReached && endReached == false ? 'bg-tableHeader' : 'bg-buttonDisabled'" :disabled="(!bottomReached || endReached)" onclick="loadMore()">Load More</button>
            <button class="button-table me-2 px-2 my-2 py-1 font-sans fw-light fs-6 rounded align-self-right active:bg-mWhite" :class="endReached == false ? 'bg-tableHeader' : 'bg-buttonDisabled'" :disabled="endReached" onclick="loadAll()">Load All</button>
            <button class="button-table px-2 my-2 py-1 font-sans fw-light fs-6 rounded align-self-right active:bg-mWhite bg-tableHeader" id="refresh-data">Refresh Data</button>
        </div>
    </div>
    <div id="right" class="d-flex flex-column justify-content-around mx-5">
        <div id="canvas" class="position-relative overscroll-contain max-w-none justify-self-center" :style="'width:'+initialSize.width+'px; height:'+initialSize.height+'px;'">
            <div class="d-flex flex-column" id="zoom-control">
                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="zoom-button p-1 rounded-top" id="zoom-in">
                    @*@click.prevent="zoom(10)">*@
                    <path stroke-linecap="round" stroke-linejoin="round" d="M21 21l-5.197-5.197m0 0A7.5 7.5 0 105.196 5.196a7.5 7.5 0 0010.607 10.607zM10.5 7.5v6m3-3h-6" />
                </svg>
                <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" class="zoom-button p-1 rounded-bottom">
                    @*@click.prevent="zoom(-10)">*@
                    <path stroke-linecap="round" stroke-linejoin="round" d="M21 21l-5.197-5.197m0 0A7.5 7.5 0 105.196 5.196a7.5 7.5 0 0010.607 10.607zM13.5 10.5h-6" />
                </svg>
            </div>
            <div id="container" ref="container" class="position-relative overflow-scroll ratio ratio-16x9">
                <div id="image" ref="image" class="cursor-grab active:cursor-grabbing" :style="'transform: scale('+zoomValue+');'">
                    @*@mousemove.prevent="imageScroll($event)" @mousedown="toggleClick(true)" @mouseup="toggleClick(false)" @wheel.prevent="wheelEvents" @mouseleave="toggleClick(false)" @contextmenu.prevent="emit('show-menu', $event)">*@
                </div>
            </div>
        </div>
        <div class="" id="info-content" onclick="console.log('@Model.selectedAlert.toString()')">
            @if (Model.imageSelected)
            {
                <img src="./assets/videoSearch.png" alt="" class="h-[27rem] pr-3">
                }
                else if (Model.textSelected)
            {
                <div class="border border-dark position-relative d-flex flex-column border rounded justify-content-center bg-mWhite overflow-auto">
                    <pre class="position-absolute top-0 left-0 font-sans p-1 text-2xl font-light text-dark">-->
                                <!-- Lorem ipsum dolor sit amet consectetur adipisicing elit. Veritatis, quas beatae neque error quasi dolores minima iste tempora officiis harum nisi placeat. Sit laboriosam perferendis iure quisquam nobis voluptates libero!
                                Dolor eos, eum consectetur, odio quas eius officiis modi illo incidunt ex amet! Impedit, autem accusantium at quam voluptatum iste est deserunt magni. Voluptates enim ut explicabo nesciunt optio cumque.
                                Labore velit ipsum dolores debitis deleniti eveniet. Distinctio pariatur nulla, harum excepturi ipsa iste consectetur error et aspernatur reprehenderit beatae atque quo necessitatibus repudiandae vitae velit odit ad architecto! Possimus?
                                Itaque dolor reiciendis, voluptatum iusto repellendus repudiandae nihil beatae. Nam itaque molestiae excepturi quam cumque dolores libero similique iusto nemo! Esse reiciendis exercitationem rem temporibus et non similique nostrum quaerat. -->
                                @Model.selectedAlert.Information<br>
                                &emsp; – Position: (@Model.FindSource(Model.selectedAlert).Lat,@Model.FindSource(Model.selectedAlert).Long)<br>
                                &emsp; - Day/Time: @Model.selectedAlert.AlertTriggerTimeIni<br>
                                &emsp; - Detection Confidence: @Model.selectedAlert.Accuracy %
                            </pre>
                </div>
                }
                else if (Model.hasTwoInputs)
            {
                <div class="info-container border border-dark d-flex flex-column border rounded justify-content-center">
                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width=".5" stroke="currentColor" class="empty-folder align-self-center">
                        <path stroke-linecap="round" stroke-linejoin="round" d="M3.75 9.776c.112-.017.227-.026.344-.026h15.812c.117 0 .232.009.344.026m-16.5 0a2.25 2.25 0 00-1.883 2.542l.857 6a2.25 2.25 0 002.227 1.932H19.05a2.25 2.25 0 002.227-1.932l.857-6a2.25 2.25 0 00-1.883-2.542m-16.5 0V6A2.25 2.25 0 016 3.75h3.879a1.5 1.5 0 011.06.44l2.122 2.12a1.5 1.5 0 001.06.44H18A2.25 2.25 0 0120.25 9v.776" />
                    </svg>
                    <center><p class="font-sans text-2xl font-light text-dark align-self-center">Chosen alert has two inputs...<br>Click again some type of input to display it!</p></center>
                </div>
            }
            else
            {
                <div class="info-container border border-dark d-flex flex-column border rounded justify-content-center">
                    <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke-width=".5" stroke="currentColor" class="empty-folder align-self-center">
                        <path stroke-linecap="round" stroke-linejoin="round" d="M3.75 9.776c.112-.017.227-.026.344-.026h15.812c.117 0 .232.009.344.026m-16.5 0a2.25 2.25 0 00-1.883 2.542l.857 6a2.25 2.25 0 002.227 1.932H19.05a2.25 2.25 0 002.227-1.932l.857-6a2.25 2.25 0 00-1.883-2.542m-16.5 0V6A2.25 2.25 0 016 3.75h3.879a1.5 1.5 0 011.06.44l2.122 2.12a1.5 1.5 0 001.06.44H18A2.25 2.25 0 0120.25 9v.776" />
                    </svg>
                    <center><p class="font-sans text-2xl font-light text-dark align-self-center">No alert chosen yet...<br>Choose an alert from the table to display it!</p></center>
                </div>
            }
        </div>
    </div>
</div>

<script type="text/javascript">
    let refresh_alerts = true;

    $("#refresh-data").click(() => {
        console.log('@Url.Action("RefreshPage","Alert")');
        $("#data").load('@Url.Action("RefreshPage","Alert")');
        refresh = false;
    })

    setInterval(() => {
        if(refresh_alerts) {
            console.log('@Url.Action("RefreshPage","Alert")');
            $("#data").load('@Url.Action("RefreshPage","Alert")');
        }
        refresh_alerts = !refresh_alerts;
    }, 2500)
</script>