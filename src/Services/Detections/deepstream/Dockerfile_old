ARG CUDA_VERSION

FROM nvcr.io/nvidia/cuda:12.1.1-runtime-ubuntu20.04

ARG TENSORRT_VERSION
ARG CUDNN_VERSION


# Add open GL libraries
RUN apt-get update && \
        DEBIAN_FRONTEND=noninteractive  apt-get install -y --no-install-recommends \
        pkg-config \
        libglvnd-dev \
        libgl1-mesa-dev \
        libegl1-mesa-dev \
        libgles2-mesa-dev \
        libegl-mesa0 && \
        rm -rf /var/lib/apt/lists/* && \
        apt autoremove


RUN apt-get update && \
        DEBIAN_FRONTEND=noninteractive  apt-get install -y  --no-install-recommends \
        wget \
        libyaml-cpp-dev \
        gnutls-bin && \
        rm -rf /var/lib/apt/lists/* && \
        apt autoremove

#
# IP requirement for removal
#  Remove  gstreamer1.0-libav \


RUN apt-get update && \
	DEBIAN_FRONTEND=noninteractive 	apt-get install -y --no-install-recommends \
	gstreamer1.0-tools \
	gstreamer1.0-plugins-good \
	gstreamer1.0-plugins-bad \
	gstreamer1.0-plugins-ugly \
	gstreamer1.0-alsa \
	libssl1.1 \
	libgstreamer1.0-0 \
	libgstrtspserver-1.0-0 \
        libjansson4 \
	librabbitmq4 \
	libuuid1 \
	libcurl4 \
	libjson-glib-1.0-0 \
	gstreamer1.0-rtsp \
	rsyslog \
        openssl \
	git \
        openssl \
        libssl1.1 \
	python3 \
        libjsoncpp-dev \
        gcc \
        libxml2 \
	tzdata && \
	rm -rf /var/lib/apt/lists/* && \
	apt autoremove

ENV NVIDIA_DRIVER_CAPABILITIES $NVIDIA_DRIVER_CAPABILITIES,video,compute,graphics,utility

RUN apt-get update

RUN apt-get install -y software-properties-common python3-gi python3-dev python3-gst-1.0 python-gi-dev git \
    python3 python3-pip python3.8-dev cmake g++ build-essential libglib2.0-dev \
    libglib2.0-dev-bin libgstreamer1.0-dev libtool m4 autoconf automake libgirepository1.0-dev libcairo2-dev python-is-python3 
RUN apt-key adv --fetch-keys https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64/3bf863cc.pub
RUN add-apt-repository "deb https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2004/x86_64/ /"
RUN apt-get update
RUN apt-get install -y cuda-toolkit-12-1


RUN apt-get install -y apt-transport-https ca-certificates -y
RUN update-ca-certificates

RUN export GST_LIBS="-lgstreamer-1.0 -lgobject-2.0 -lglib-2.0"
RUN export GST_CFLAGS="-pthread -I/usr/include/gstreamer-1.0 -I/usr/include/glib-2.0 -I/usr/lib/x86_64-linux-gnu/glib-2.0/include"

# RUN git clone https://github.com/GStreamer/gst-python.git
# RUN cd gst-python && git checkout 5343aeb && ./autogen.sh PYTHON=python3 && ./configure PYTHON=python3 && make && make install



# RUN ./install.sh

# ADD user_additional_install_runtime.sh /opt/

# RUN ln -s /usr/lib/x86_64-linux-gnu/libnvcuvid.so.1 /usr/lib/x86_64-linux-gnu/libnvcuvid.so && \
#     ln -s /usr/lib/x86_64-linux-gnu/libnvidia-encode.so.1 /usr/lib/x86_64-linux-gnu/libnvidia-encode.so && \
#     ln -s /usr/local/cuda/lib64/libcudart.so.12.1.105 /usr/local/cuda/lib64/libcudart.so



ADD  nv-tensorrt-local-repo-ubuntu2004-8.5.3-cuda-11.8_1.0-1_amd64.deb /tmp

 
RUN mkdir -p /tmp/temp_trt && \
       cd /tmp/temp_trt && \
       mv /tmp/nv-tensorrt-local-repo-ubuntu2004-8.5.3-cuda-11.8_1.0-1_amd64.deb  /tmp/temp_trt/ && \
       ls -l /tmp/temp_trt/ && \
       dpkg -i /tmp/temp_trt/nv-tensorrt-local-repo-ubuntu2004-8.5.3-cuda-11.8_1.0-1_amd64.deb && \
       cp /var/nv-tensorrt-local-repo-ubuntu2004-8.5.3-cuda-11.8/nv-tensorrt-local-3EFA7C6A-keyring.gpg /usr/share/keyrings/ && \
       apt-get update && \
       DEBIAN_FRONTEND=noninteractive apt-get install -y --no-install-recommends \
       libnvinfer8=8.5.3-1+cuda11.8 \
       libnvinfer-plugin8=8.5.3-1+cuda11.8 \
       libnvparsers8=8.5.3-1+cuda11.8 \
       libnvonnxparsers8=8.5.3-1+cuda11.8 \
       libnvinfer-bin=8.5.3-1+cuda11.8 \
       libnvinfer-dev=8.5.3-1+cuda11.8 \
       libnvinfer-plugin-dev=8.5.3-1+cuda11.8 \
       libnvparsers-dev=8.5.3-1+cuda11.8 \
       libnvonnxparsers-dev=8.5.3-1+cuda11.8 \
       libnvinfer-samples=8.5.3-1+cuda11.8 \
       python3-libnvinfer=8.5.3-1+cuda11.8 \
       python3-libnvinfer-dev=8.5.3-1+cuda11.8 \
       uff-converter-tf=8.5.3-1+cuda11.8 \
       graphsurgeon-tf=8.5.3-1+cuda11.8 \
       libcudnn8=8.8.1.3-1+cuda12.0 \
       libcudnn8-dev=8.8.1.3-1+cuda12.0 && \
       cd /tmp && \
       dpkg --purge nv-tensorrt-local-repo-ubuntu2004-8.5.3-cuda-11.8 1.0-1 && \
       rm -rf temp_trt && \
       rm -rf /var/lib/apt/lists/*
RUN apt-get update
ADD deepstream-6.3_6.3.0-1_amd64.deb /opt
RUN chmod +x /opt/deepstream-6.3_6.3.0-1_amd64.deb && apt-get install -y /opt/deepstream-6.3_6.3.0-1_amd64.deb
# COPY 10_nvidia.json /usr/share/glvnd/egl_vendor.d/10_nvidia.json
# WORKDIR /opt/nvidia/deepstream/deepstream
# RUN ./gRPC_installation.sh

# # added wget so gRPC script could install
# # RUN apt-get remove --purge -y wget
# RUN rm ./gRPC_installation.sh && \
#     cd /tmp && \
#     rm -rf temp_cuda99

RUN ldconfig

# IP requirement for removal
RUN rm -f /usr/lib/x86_64-linux-gnu/gstreamer-1.0/libgstaudioparsers.so
RUN rm -f /usr/lib/x86_64-linux-gnu/gstreamer-1.0/libgstfaad.so
RUN rm -f /usr/lib/x86_64-linux-gnu/gstreamer-1.0/libgstvoaacenc.so \
    /usr/lib/x86_64-linux-gnu/gstreamer-1.0/libgstx264.so
RUN rm -f /usr/lib/x86_64-linux-gnu/libavresample* /usr/lib/x86_64-linux-gnu/libavutil* \
     /usr/lib/x86_64-linux-gnu/libavcodec* /usr/lib/x86_64-linux-gnu/libavformat* \
     /usr/lib/x86_64-linux-gnu/libavfilter* /usr/lib/x86_64-linux-gnu/gstreamer-1.0/libgstde265.so* \
    /usr/lib/x86_64-linux-gnu/gstreamer-1.0/libgstx265.so* /usr/lib/x86_64-linux-gnu/libde265.so*
RUN rm -f /usr/lib/x86_64-linux-gnu/gstreamer-1.0/libgstvpx.so* \
    /usr/lib/x86_64-linux-gnu/libmpeg2.so.0* /usr/lib/x86_64-linux-gnu/libmpeg2encpp-2.1.so* /usr/lib/x86_64-linux-gnu/libmpg123.so* \
    /usr/lib/x86_64-linux-gnu/libx265.so.179 /usr/lib/x86_64-linux-gnu/libx264.so.155 /usr/lib/x86_64-linux-gnu/libvpx.so*   \
    /usr/lib/x86_64-linux-gnu/libmpeg2convert.so*


# RUN ./user_additional_install_runtime.sh
# Add local file to Docker image
ADD user_additional_install_runtime.sh /opt

# Execute local file
RUN chmod +x /opt/user_additional_install_runtime.sh && /opt/user_additional_install_runtime.sh

# Add local file to Docker image
ADD user_deepstream_python_apps_install.sh /opt

# Execute local file
RUN chmod +x /opt/user_deepstream_python_apps_install.sh && /opt/user_deepstream_python_apps_install.sh --version 1.1.8

WORKDIR /opt/nvidia/deepstream/deepstream
# COPY ./deepstream_python_apps ./deepstream_python_apps
COPY --chmod=777 . .

WORKDIR /opt/nvidia/deepstream/deepstream.6-3
# COPY ./deepstream_python_apps ./deepstream_python_apps
COPY --chmod=777 . .




RUN pip3 install numpy opencv-python-headless
CMD ["/bin/bash"]